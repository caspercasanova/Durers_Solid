shader_type spatial;

render_mode unshaded, blend_mix;

uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0, 0.0, 0.0);
uniform float variation = 0.0;
varying float elapsed_time;
void vertex() {
	elapsed_time = TIME;
	UV = UV*uv1_scale.xy+uv1_offset.xy;
}
float rand(vec2 x) {
    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);
}
vec2 rand2(vec2 x) {
    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),
						      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);
}
vec3 rand3(vec2 x) {
    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),
							  dot(x, vec2(3.4562, 17.398)),
                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);
}
float param_rnd(float minimum, float maximum, float seed) {
	return minimum+(maximum-minimum)*rand(vec2(seed));
}
vec3 rgb2hsv(vec3 c) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
	vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
float pingpong(float a, float b)
{
  return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
}
uniform sampler2D texture_1;
const float texture_1_size = 1024.0;
uniform sampler2D texture_2;
const float texture_2_size = 512.0;
uniform sampler2D texture_3;
const float texture_3_size = 512.0;
float value_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float p00 = rand(mod(o, size));
	float p01 = rand(mod(o + vec2(0.0, 1.0), size));
	float p10 = rand(mod(o + vec2(1.0, 0.0), size));
	float p11 = rand(mod(o + vec2(1.0, 1.0), size));
	p00 = sin(p00 * 6.28318530718 + offset * 6.28318530718) / 2.0 + 0.5;
	p01 = sin(p01 * 6.28318530718 + offset * 6.28318530718) / 2.0 + 0.5;
	p10 = sin(p10 * 6.28318530718 + offset * 6.28318530718) / 2.0 + 0.5;
	p11 = sin(p11 * 6.28318530718 + offset * 6.28318530718) / 2.0 + 0.5;
	vec2 t =  f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
	return mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);
}
float fbm_2d_value(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = value_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float perlin_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float a00 = rand(mod(o, size)) * 6.28318530718 + offset * 6.28318530718;
	float a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718 + offset * 6.28318530718;
	float a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718 + offset * 6.28318530718;
	float a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718 + offset * 6.28318530718;
	vec2 v00 = vec2(cos(a00), sin(a00));
	vec2 v01 = vec2(cos(a01), sin(a01));
	vec2 v10 = vec2(cos(a10), sin(a10));
	vec2 v11 = vec2(cos(a11), sin(a11));
	float p00 = dot(v00, f);
	float p01 = dot(v01, f - vec2(0.0, 1.0));
	float p10 = dot(v10, f - vec2(1.0, 0.0));
	float p11 = dot(v11, f - vec2(1.0, 1.0));
	vec2 t =  f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
	return 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);
}
float fbm_2d_perlin(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = perlin_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float perlinabs_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	return abs(2.0*perlin_noise_2d(coord, size, offset, seed)-1.0);
}
float fbm_2d_perlinabs(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = perlinabs_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float fbm_2d_mod289(float x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float fbm_2d_permute(float x) {
	return fbm_2d_mod289(((x * 34.0) + 1.0) * x);
}
vec2 fbm_2d_rgrad2(vec2 p, float rot, float seed) {
	float u = fbm_2d_permute(fbm_2d_permute(p.x) + p.y) * 0.0243902439 + rot; // Rotate by shift
	u = fract(u) * 6.28318530718; // 2*pi
	return vec2(cos(u), sin(u));
}
float simplex_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	coord *= 2.0; // needed for it to tile
	coord += rand2(vec2(seed, 1.0-seed)) + size;
	size *= 2.0; // needed for it to tile
	coord.y += 0.001;
	vec2 uv = vec2(coord.x + coord.y*0.5, coord.y);
	vec2 i0 = floor(uv);
	vec2 f0 = fract(uv);
	vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);
	vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);
	vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);
	i1 = i0 + i1;
	vec2 i2 = i0 + vec2(1.0, 1.0);
	vec2 d0 = coord - p0;
	vec2 d1 = coord - p1;
	vec2 d2 = coord - p2;
	vec3 xw = mod(vec3(p0.x, p1.x, p2.x), size.x);
	vec3 yw = mod(vec3(p0.y, p1.y, p2.y), size.y);
	vec3 iuw = xw + 0.5 * yw;
	vec3 ivw = yw;
	vec2 g0 = fbm_2d_rgrad2(vec2(iuw.x, ivw.x), offset, seed);
	vec2 g1 = fbm_2d_rgrad2(vec2(iuw.y, ivw.y), offset, seed);
	vec2 g2 = fbm_2d_rgrad2(vec2(iuw.z, ivw.z), offset, seed);
	vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));
	vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));
	t = max(t, vec3(0.0));
	vec3 t2 = t * t;
	vec3 t4 = t2 * t2;
	float n = dot(t4, w);
	return 0.5 + 5.5 * n;
}
float fbm_2d_simplex(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = simplex_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node =  0.5 + 0.25 * sin(offset * 6.28318530718 + 6.28318530718 * node);
			vec2 diff = neighbor + node - f;
			float dist = length(diff);
			min_dist = min(min_dist, dist);
		}
	}
	return min_dist;
}
float fbm_2d_cellular(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular2_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist1 = 2.0;
	float min_dist2 = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node = 0.5 + 0.25 * sin(offset * 6.28318530718 + 6.28318530718*node);
			vec2 diff = neighbor + node - f;
			float dist = length(diff);
			if (min_dist1 > dist) {
				min_dist2 = min_dist1;
				min_dist1 = dist;
			} else if (min_dist2 > dist) {
				min_dist2 = dist;
			}
		}
	}
	return min_dist2-min_dist1;
}
float fbm_2d_cellular2(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular2_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular3_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node = 0.5 + 0.25 * sin(offset * 6.28318530718 + 6.28318530718*node);
			vec2 diff = neighbor + node - f;
			float dist = abs((diff).x) + abs((diff).y);
			min_dist = min(min_dist, dist);
		}
	}
	return min_dist;
}
float fbm_2d_cellular3(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular3_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular4_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist1 = 2.0;
	float min_dist2 = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node = 0.5 + 0.25 * sin(offset * 6.28318530718 + 6.28318530718*node);
			vec2 diff = neighbor + node - f;
			float dist = abs((diff).x) + abs((diff).y);
			if (min_dist1 > dist) {
				min_dist2 = min_dist1;
				min_dist1 = dist;
			} else if (min_dist2 > dist) {
				min_dist2 = dist;
			}
		}
	}
	return min_dist2-min_dist1;
}
float fbm_2d_cellular4(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular4_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular5_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node = 0.5 + 0.5 * sin(offset * 6.28318530718 + 6.28318530718*node);
			vec2 diff = neighbor + node - f;
			float dist = max(abs((diff).x), abs((diff).y));
			min_dist = min(min_dist, dist);
		}
	}
	return min_dist;
}
float fbm_2d_cellular5(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular5_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
float cellular6_noise_2d(vec2 coord, vec2 size, float offset, float seed) {
	vec2 o = floor(coord)+rand2(vec2(seed, 1.0-seed))+size;
	vec2 f = fract(coord);
	float min_dist1 = 2.0;
	float min_dist2 = 2.0;
	for(float x = -1.0; x <= 1.0; x++) {
		for(float y = -1.0; y <= 1.0; y++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);
			node = 0.5 + 0.25 * sin(offset * 6.28318530718 + 6.28318530718*node);
			vec2 diff = neighbor + node - f;
			float dist = max(abs((diff).x), abs((diff).y));
			if (min_dist1 > dist) {
				min_dist2 = min_dist1;
				min_dist1 = dist;
			} else if (min_dist2 > dist) {
				min_dist2 = dist;
			}
		}
	}
	return min_dist2-min_dist1;
}
float fbm_2d_cellular6(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = cellular6_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
// MIT License Inigo Quilez - https://www.shadertoy.com/view/Xd23Dh
float voronoise_noise_2d( vec2 coord, vec2 size, float offset, float seed) {
	vec2 i = floor(coord) + rand2(vec2(seed, 1.0-seed)) + size;
	vec2 f = fract(coord);
	
	vec2 a = vec2(0.0);
	
	for( int y=-2; y<=2; y++ ) {
		for( int x=-2; x<=2; x++ ) {
			vec2  g = vec2( float(x), float(y) );
			vec3  o = rand3( mod(i + g, size) + vec2(seed) );
			o.xy += 0.25 * sin(offset * 6.28318530718 + 6.28318530718*o.xy);
			vec2  d = g - f + o.xy;
			float w = pow( 1.0-smoothstep(0.0, 1.414, length(d)), 1.0 );
			a += vec2(o.z*w,w);
		}
	}
	
	return a.x/a.y;
}
float fbm_2d_voronoise(vec2 coord, vec2 size, int folds, int octaves, float persistence, float offset, float seed) {
	float normalize_factor = 0.0;
	float value = 0.0;
	float scale = 1.0;
	for (int i = 0; i < octaves; i++) {
		float noise = voronoise_noise_2d(coord*size, size, offset, seed);
		for (int f = 0; f < folds; ++f) {
			noise = abs(2.0*noise-1.0);
		}
		value += noise * scale;
		normalize_factor += scale;
		size *= 2.0;
		scale *= persistence;
	}
	return value / normalize_factor;
}
vec2 transform2_clamp(vec2 uv) {
	return clamp(uv, vec2(0.0), vec2(1.0));
}
vec2 transform2(vec2 uv, vec2 translate, float rotate, vec2 scale) {
 	vec2 rv;
	uv -= translate;
	uv -= vec2(0.5);
	rv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;
	rv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;
	rv /= scale;
	rv += vec2(0.5);
	return rv;	
}
vec2 rotate(vec2 uv, float rotate) {
 	vec2 rv;
	rv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;
	rv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;
	return rv;	
}
vec2 swirl_tile_false(vec2 uv, vec2 center, float radius, float angle) {
	vec2 v = uv-center;
	float l = length(v);
	if (l > radius) {
		return uv;
	} else {
		return rotate(v, angle*(1.0-l/radius)*(1.0-l/radius))+center;
	}
}
vec2 swirl_tile_true(vec2 uv, vec2 center, float radius, float angle) {
	center = fract(center);
	vec2 tile_offset = 2.0*(step(vec2(0.5), uv)-vec2(0.5));
	uv = swirl_tile_false(uv, center, radius, angle);
	uv = swirl_tile_false(uv, center+tile_offset, radius, angle);
	uv = swirl_tile_false(uv, center+vec2(tile_offset.x, 0.0), radius, angle);
	return swirl_tile_false(uv, center+vec2(0.0, tile_offset.y), radius, angle);
}
float shape_circle(vec2 uv, float sides, float size, float edge) {
	uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
	float distance = length(uv);
	return clamp((1.0-distance/size)/edge, 0.0, 1.0);
}
float shape_polygon(vec2 uv, float sides, float size, float edge) {
	uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
	float angle = atan(uv.x, uv.y)+3.14159265359;
	float slice = 6.28318530718/sides;
	return clamp((1.0-(cos(floor(0.5+angle/slice)*slice-angle)*length(uv))/size)/edge, 0.0, 1.0);
}
float shape_star(vec2 uv, float sides, float size, float edge) {
	uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
	float angle = atan(uv.x, uv.y);
	float slice = 6.28318530718/sides;
	return clamp((1.0-(cos(floor(angle*sides/6.28318530718-0.5+2.0*step(fract(angle*sides/6.28318530718), 0.5))*slice-angle)*length(uv))/size)/edge, 0.0, 1.0);
}
float shape_curved_star(vec2 uv, float sides, float size, float edge) {
	uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
	float angle = 2.0*(atan(uv.x, uv.y)+3.14159265359);
	float slice = 6.28318530718/sides;
	return clamp((1.0-cos(floor(0.5+0.5*angle/slice)*2.0*slice-angle)*length(uv)/size)/edge, 0.0, 1.0);
}
float shape_rays(vec2 uv, float sides, float size, float edge) {
	uv = 2.0*uv-1.0;
	edge = 0.5*max(edge, 1.0e-8)*size;
	float slice = 6.28318530718/sides;
	float angle = mod(atan(uv.x, uv.y)+3.14159265359, slice)/slice;
	return clamp(min((size-angle)/edge, angle/edge), 0.0, 1.0);
}
vec3 blend_normal(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*c1 + (1.0-opacity)*c2;
}
vec3 blend_dissolve(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	if (rand(uv) < opacity) {
		return c1;
	} else {
		return c2;
	}
}
vec3 blend_multiply(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*c1*c2 + (1.0-opacity)*c2;
}
vec3 blend_screen(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;
}
float blend_overlay_f(float c1, float c2) {
	return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
}
vec3 blend_overlay(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
vec3 blend_hard_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*0.5*(c1*c2+blend_overlay(uv, c1, c2, 1.0)) + (1.0-opacity)*c2;
}
float blend_soft_light_f(float c1, float c2) {
	return (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);
}
vec3 blend_soft_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_burn_f(float c1, float c2) {
	return (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);
}
vec3 blend_burn(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_dodge_f(float c1, float c2) {
	return (c1==1.0)?c1:min(c2/(1.0-c1),1.0);
}
vec3 blend_dodge(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
vec3 blend_lighten(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*max(c1, c2) + (1.0-opacity)*c2;
}
vec3 blend_darken(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*min(c1, c2) + (1.0-opacity)*c2;
}
vec3 blend_difference(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;
}
vec3 blend_additive(vec2 uv, vec3 c1, vec3 c2, float oppacity) {
	return c2 + c1 * oppacity;
}
vec3 blend_addsub(vec2 uv, vec3 c1, vec3 c2, float oppacity) {
	return c2 + (c1 - .5) * 2.0 * oppacity;
}
float blend_linear_light_f(float c1, float c2) {
	return (c1 + 2.0 * c2) - 1.0;
}
vec3 blend_linear_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {
return opacity*vec3(blend_linear_light_f(c1.x, c2.x), blend_linear_light_f(c1.y, c2.y), blend_linear_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_vivid_light_f(float c1, float c2) {
	return (c1 < 0.5) ? 1.0 - (1.0 - c2) / (2.0 * c1) : c2 / (2.0 * (1.0 - c1));
}
vec3 blend_vivid_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_vivid_light_f(c1.x, c2.x), blend_vivid_light_f(c1.y, c2.y), blend_vivid_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_pin_light_f( float c1, float c2) {
	return (2.0 * c1 - 1.0 > c2) ? 2.0 * c1 - 1.0 : ((c1 < 0.5 * c2) ? 2.0 * c1 : c2);
}
vec3 blend_pin_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_pin_light_f(c1.x, c2.x), blend_pin_light_f(c1.y, c2.y), blend_pin_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_hard_mix_f(float c1, float c2) {
	return floor(c1 + c2);
}
vec3 blend_hard_mix(vec2 uv, vec3 c1, vec3 c2, float opacity) {
		return opacity*vec3(blend_hard_mix_f(c1.x, c2.x), blend_hard_mix_f(c1.y, c2.y), blend_hard_mix_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
float blend_exclusion_f(float c1, float c2) {
	return c1 + c2 - 2.0 * c1 * c2;
}
vec3 blend_exclusion(vec2 uv, vec3 c1, vec3 c2, float opacity) {
	return opacity*vec3(blend_exclusion_f(c1.x, c2.x), blend_exclusion_f(c1.y, c2.y), blend_exclusion_f(c1.z, c2.z)) + (1.0-opacity)*c2;
}
vec2 uvmirror_h(vec2 uv, float offset, float flip_sides) {
	return vec2(flip_sides*max(0.0, (abs(uv.x-0.5)-0.5*offset))+0.5, uv.y);
}
vec2 uvmirror_v(vec2 uv, float offset, float flip_sides) {
	return vec2(uv.x, flip_sides*max(0.0, (abs(uv.y-0.5)-0.5*offset))+0.5);
}
vec2 scale(vec2 uv, vec2 center, vec2 scale) {
	uv -= center;
	uv /= scale;
	uv += center;
	return uv;
}
const float p_o14530_cx = 0.000000000;
const float p_o14530_cy = 0.000000000;
const float p_o14530_scale_x = 0.680000000;
const float p_o14530_scale_y = 0.680000000;
const float p_o14508_amount1 = 0.270000000;
const float p_o14508_amount2 = 0.090000000;
const float p_o14376_amount1 = 1.490000000;
const float p_o14376_amount2 = 1.550000000;
const float p_o14376_amount3 = 3.000000000;
const float p_o14376_amount4 = 1.000000000;
const float p_o14376_amount5 = 1.000000000;
const float p_o14376_amount6 = 5.000000000;
const float p_o14185_translate_x = 0.000000000;
const float p_o14185_translate_y = 0.000000000;
const float p_o14185_rotate = -38.599998000;
const float p_o14185_scale_x = 0.812350000;
const float p_o14185_scale_y = 0.438800000;
const float p_o14183_cx = 0.000000000;
const float p_o14183_cy = 0.000000000;
const float p_o14183_angle = 253.275000000;
const float p_o14183_radius = 1.634000000;
const float p_o14184_radius = 1.930000000;
const float p_o14184_repeat = 1.000000000;
const float p_o14392_translate_x = 0.000000000;
const float p_o14392_translate_y = 0.000000000;
const float p_o14392_rotate = 0.000000000;
const float p_o14392_scale_x = 1.000000000;
const float p_o14392_scale_y = 0.500000000;
const float p_o14391_default_in1 = 1.000000000;
const float p_o14391_default_in2 = 0.000000000;
const float p_o14378_repeat = 1.000000000;
const float p_o14378_rotate = 90.000000000;
const float p_o14378_gradient_0_pos = 0.000000000;
const vec4 p_o14378_gradient_0_col = vec4(1.000000000, 1.000000000, 1.000000000, 1.000000000);
const float p_o14378_gradient_1_pos = 1.000000000;
const vec4 p_o14378_gradient_1_col = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);
vec4 o14378_gradient_gradient_fct(float x) {
  if (x < p_o14378_gradient_0_pos) {
    return p_o14378_gradient_0_col;
  } else if (x < p_o14378_gradient_1_pos) {
    return mix(p_o14378_gradient_0_col, p_o14378_gradient_1_col, ((x-p_o14378_gradient_0_pos)/(p_o14378_gradient_1_pos-p_o14378_gradient_0_pos)));
  }
  return p_o14378_gradient_1_col;
}
const float p_o14182_translate_x = 0.000000000;
const float p_o14182_rotate = 0.000000000;
const float p_o14182_scale_x = 1.000000000;
const float p_o14182_scale_y = 1.000000000;
const float p_o14187_value = 0.570000000;
const float p_o14187_width = 0.050000000;
const float seed_o14181 = 0.087462366;
const float p_o14181_scale_x = 31.000000000;
const float p_o14181_scale_y = 11.000000000;
const float p_o14181_folds = 0.000000000;
const float p_o14181_iterations = 5.000000000;
const float p_o14181_persistence = 0.550000000;
const float p_o14181_offset = 0.000000000;
const float p_o14506_default_in1 = 0.000000000;
const float p_o14506_default_in2 = 0.000000000;
const float p_o14377_default_in1 = 0.000000000;
const float p_o14377_default_in2 = 0.000000000;
const float p_o14186_sides = 6.000000000;
const float p_o14186_radius = 2.570000000;
const float p_o14186_edge = 1.050000000;
const float p_o14505_cx = 0.000000000;
const float p_o14505_cy = 0.000000000;
const float p_o14505_angle = 360.000000000;
const float p_o14505_radius = 3.000000000;
const float p_o14504_radius = 2.100000000;
const float p_o14504_repeat = 1.000000000;
const float seed_o14503 = 0.087462366;
const float p_o14503_scale_x = 15.000000000;
const float p_o14503_scale_y = 6.000000000;
const float p_o14503_folds = 0.000000000;
const float p_o14503_iterations = 3.000000000;
const float p_o14503_persistence = 1.000000000;
const float p_o14503_offset = 0.000000000;
const float p_o14394_gradient_0_pos = 0.000000000;
const vec4 p_o14394_gradient_0_col = vec4(1.000000000, 1.000000000, 1.000000000, 1.000000000);
const float p_o14394_gradient_1_pos = 0.048745000;
const vec4 p_o14394_gradient_1_col = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);
const float p_o14394_gradient_2_pos = 0.630563000;
const vec4 p_o14394_gradient_2_col = vec4(0.052124001, 0.953125000, 0.000000000, 1.000000000);
const float p_o14394_gradient_3_pos = 0.939171000;
const vec4 p_o14394_gradient_3_col = vec4(1.000000000, 0.375000000, 0.000000000, 1.000000000);
vec4 o14394_gradient_gradient_fct(float x) {
  if (x < p_o14394_gradient_0_pos) {
    return p_o14394_gradient_0_col;
  } else if (x < p_o14394_gradient_1_pos) {
    return mix(mix(p_o14394_gradient_1_col, p_o14394_gradient_2_col, (x-p_o14394_gradient_1_pos)/(p_o14394_gradient_2_pos-p_o14394_gradient_1_pos)), mix(p_o14394_gradient_0_col, p_o14394_gradient_1_col, (x-p_o14394_gradient_0_pos)/(p_o14394_gradient_1_pos-p_o14394_gradient_0_pos)), 1.0-0.5*(x-p_o14394_gradient_0_pos)/(p_o14394_gradient_1_pos-p_o14394_gradient_0_pos));
  } else if (x < p_o14394_gradient_2_pos) {
    return 0.5*(mix(p_o14394_gradient_1_col, p_o14394_gradient_2_col, (x-p_o14394_gradient_1_pos)/(p_o14394_gradient_2_pos-p_o14394_gradient_1_pos)) + mix(mix(p_o14394_gradient_0_col, p_o14394_gradient_1_col, (x-p_o14394_gradient_0_pos)/(p_o14394_gradient_1_pos-p_o14394_gradient_0_pos)), mix(p_o14394_gradient_2_col, p_o14394_gradient_3_col, (x-p_o14394_gradient_2_pos)/(p_o14394_gradient_3_pos-p_o14394_gradient_2_pos)), 0.5-0.5*cos(3.14159265359*(x-p_o14394_gradient_1_pos)/(p_o14394_gradient_2_pos-p_o14394_gradient_1_pos))));
  } else if (x < p_o14394_gradient_3_pos) {
    return mix(mix(p_o14394_gradient_1_col, p_o14394_gradient_2_col, (x-p_o14394_gradient_1_pos)/(p_o14394_gradient_2_pos-p_o14394_gradient_1_pos)), mix(p_o14394_gradient_2_col, p_o14394_gradient_3_col, (x-p_o14394_gradient_2_pos)/(p_o14394_gradient_3_pos-p_o14394_gradient_2_pos)), 0.5+0.5*(x-p_o14394_gradient_2_pos)/(p_o14394_gradient_3_pos-p_o14394_gradient_2_pos));
  }
  return p_o14394_gradient_3_col;
}
const vec4 p_o14531_color = vec4(0.552938998, 0.286274999, 1.000000000, 1.000000000);
const float p_o14393_default_in1 = 0.060000000;
const float p_o14393_default_in2 = 0.000000000;
const float p_o14510_color = 1.500000000;
const float p_o14509_default_in1 = 0.000000000;
const float p_o14509_default_in2 = 0.000000000;
const float seed_o14532 = 0.000000000;
const float p_o14532_v1 = 0.000000000;
const float p_o14532_v2 = 0.100000000;
const float p_o14532_v3 = 0.200000000;
const float p_o14532_v4 = 0.300000000;
const float p_o14532_v5 = 0.400000000;
float o14532_input_in(vec2 uv, float _seed_variation_) {
float o14378_0_r = 0.5+(cos(p_o14378_rotate*0.01745329251)*((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))).x-0.5)+sin(p_o14378_rotate*0.01745329251)*((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))).y-0.5))/(cos(abs(mod(p_o14378_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o14378_0_1_rgba = o14378_gradient_gradient_fct(fract(o14378_0_r*p_o14378_repeat));
float o14391_0_clamp_false = p_o14391_default_in1/(dot((o14378_0_1_rgba).rgb, vec3(1.0))/3.0);
float o14391_0_clamp_true = clamp(o14391_0_clamp_false, 0.0, 1.0);
float o14391_0_2_f = o14391_0_clamp_false;
float o14181_0_1_f = fbm_2d_voronoise((fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), vec2(p_o14181_scale_x, p_o14181_scale_y), int(p_o14181_folds), int(p_o14181_iterations), p_o14181_persistence, p_o14181_offset, (seed_o14181+fract(_seed_variation_)));
vec3 o14187_0_false = clamp((vec4(vec3(o14181_0_1_f), 1.0).rgb-vec3(p_o14187_value))/max(0.0001, p_o14187_width)+vec3(0.5), vec3(0.0), vec3(1.0));
vec3 o14187_0_true = vec3(1.0)-o14187_0_false;vec4 o14187_0_1_rgba = vec4(o14187_0_false, vec4(vec3(o14181_0_1_f), 1.0).a);
vec4 o14208_0 = textureLod(texture_1, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14301_0 = textureLod(texture_2, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14428_0 = textureLod(texture_3, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14188_0_1_rgba = vec4((dot((o14187_0_1_rgba).rgb, vec3(1.0))/3.0), (dot((o14208_0).rgb, vec3(1.0))/3.0), (dot((o14301_0).rgb, vec3(1.0))/3.0), (dot((o14428_0).rgb, vec3(1.0))/3.0));
vec4 o14182_0_1_rgba = o14188_0_1_rgba;
vec4 o14392_0_1_rgba = o14182_0_1_rgba;
vec4 o14184_0_1_rgba = o14392_0_1_rgba;
vec4 o14183_0_1_rgba = o14184_0_1_rgba;
vec4 o14185_0_1_rgba = o14183_0_1_rgba;
float o14189_0_1_f = o14185_0_1_rgba.r;
float o14189_1_2_f = o14185_0_1_rgba.g;
float o14189_2_3_f = o14185_0_1_rgba.b;
float o14189_3_4_f = o14185_0_1_rgba.a;
float o14186_0_1_f = shape_circle((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), p_o14186_sides, p_o14186_radius*1.0, p_o14186_edge*1.0);
float o14377_0_clamp_false = smoothstep(0.0, 1.0, o14186_0_1_f);
float o14377_0_clamp_true = clamp(o14377_0_clamp_false, 0.0, 1.0);
float o14377_0_1_f = o14377_0_clamp_false;
float o14503_0_1_f = fbm_2d_value((fract(transform2((vec2(fract(p_o14504_repeat*atan((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14504_radius*length((swirl_tile_false((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), vec2(p_o14503_scale_x, p_o14503_scale_y), int(p_o14503_folds), int(p_o14503_iterations), p_o14503_persistence, p_o14503_offset, (seed_o14503+fract(_seed_variation_)));
vec4 o14182_1_4_rgba = vec4(vec3(o14503_0_1_f), 1.0);
vec4 o14504_0_1_rgba = o14182_1_4_rgba;
vec4 o14505_0_1_rgba = o14504_0_1_rgba;
float o14506_0_clamp_false = o14377_0_1_f-(dot((o14505_0_1_rgba).rgb, vec3(1.0))/3.0);
float o14506_0_clamp_true = clamp(o14506_0_clamp_false, 0.0, 1.0);
float o14506_0_1_f = o14506_0_clamp_true;
vec4 o14185_1_3_rgba = vec4(vec3(o14506_0_1_f), 1.0);
vec4 o14185_3_4_rgba = vec4(vec3(o14377_0_1_f), 1.0);
vec4 o14394_0_1_rgba = o14394_gradient_gradient_fct((dot((o14185_3_4_rgba).rgb, vec3(1.0))/3.0));
vec4 o14531_0_1_rgba = p_o14531_color;
float o14409_0_1_f = (length((transform2((uv), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0))))-.5)*2.);
float o14393_0_clamp_false = p_o14393_default_in1/o14409_0_1_f;
float o14393_0_clamp_true = clamp(o14393_0_clamp_false, 0.0, 1.0);
float o14393_0_2_f = o14393_0_clamp_false;
vec4 o14185_2_5_rgba = vec4(vec3(o14393_0_2_f), 1.0);
vec4 o14376_0_b = vec4(vec3(o14189_0_1_f), 1.0);
vec4 o14376_0_l;
float o14376_0_a;
o14376_0_l = vec4(vec3(o14189_1_2_f), 1.0);
o14376_0_a = p_o14376_amount1*1.0;
o14376_0_b = vec4(blend_additive((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
o14376_0_l = vec4(vec3(o14189_2_3_f), 1.0);
o14376_0_a = p_o14376_amount2*1.0;
o14376_0_b = vec4(blend_additive((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
o14376_0_l = vec4(vec3(o14189_3_4_f), 1.0);
o14376_0_a = p_o14376_amount3*1.0;
o14376_0_b = vec4(blend_additive((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
o14376_0_l = o14185_1_3_rgba;
o14376_0_a = p_o14376_amount4*1.0;
o14376_0_b = vec4(blend_multiply((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
o14376_0_l = o14394_0_1_rgba;
o14376_0_a = p_o14376_amount5*1.0;
o14376_0_b = vec4(blend_multiply((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
o14376_0_l = o14531_0_1_rgba;
o14376_0_a = p_o14376_amount6*(dot((o14185_2_5_rgba).rgb, vec3(1.0))/3.0);
o14376_0_b = vec4(blend_additive((uv), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));
vec4 o14376_0_2_rgba = o14376_0_b;
return (dot((o14376_0_2_rgba).rgb, vec3(1.0))/3.0);
}
const vec4 p_o14513_color = vec4(0.531898022, 0.849420011, 1.000000000, 1.000000000);
const float p_o14529_cx = 0.000000000;
const float p_o14529_cy = 0.000000000;
const float p_o14529_rotate = 60.000000000;
const float p_o14512_default_in1 = 0.000000000;
const float p_o14512_default_in2 = 0.250000000;
const float p_o14511_default_in1 = 0.000000000;
const float p_o14511_default_in2 = 0.000000000;
const float p_o14528_offset = 0.000000000;
const float p_o14527_value = 0.500000000;
const float p_o14527_width = 1.290000000;
const float p_o14527_contrast = -0.020000000;
const float p_o14514_repeat = 1.000000000;
const float p_o14514_gradient_0_pos = 0.000000000;
const vec4 p_o14514_gradient_0_col = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);
const float p_o14514_gradient_1_pos = 1.000000000;
const vec4 p_o14514_gradient_1_col = vec4(1.000000000, 1.000000000, 1.000000000, 1.000000000);
vec4 o14514_gradient_gradient_fct(float x) {
  if (x < p_o14514_gradient_0_pos) {
    return p_o14514_gradient_0_col;
  } else if (x < p_o14514_gradient_1_pos) {
    return mix(p_o14514_gradient_0_col, p_o14514_gradient_1_col, ((x-p_o14514_gradient_0_pos)/(p_o14514_gradient_1_pos-p_o14514_gradient_0_pos)));
  }
  return p_o14514_gradient_1_col;
}
void fragment() {
	float _seed_variation_ = variation;
	vec2 uv = fract(UV);
float o14378_0_r = 0.5+(cos(p_o14378_rotate*0.01745329251)*((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))).x-0.5)+sin(p_o14378_rotate*0.01745329251)*((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))).y-0.5))/(cos(abs(mod(p_o14378_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o14378_0_1_rgba = o14378_gradient_gradient_fct(fract(o14378_0_r*p_o14378_repeat));
float o14391_0_clamp_false = p_o14391_default_in1/(dot((o14378_0_1_rgba).rgb, vec3(1.0))/3.0);
float o14391_0_clamp_true = clamp(o14391_0_clamp_false, 0.0, 1.0);
float o14391_0_2_f = o14391_0_clamp_false;
float o14181_0_1_f = fbm_2d_voronoise((fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), vec2(p_o14181_scale_x, p_o14181_scale_y), int(p_o14181_folds), int(p_o14181_iterations), p_o14181_persistence, p_o14181_offset, (seed_o14181+fract(_seed_variation_)));
vec3 o14187_0_false = clamp((vec4(vec3(o14181_0_1_f), 1.0).rgb-vec3(p_o14187_value))/max(0.0001, p_o14187_width)+vec3(0.5), vec3(0.0), vec3(1.0));
vec3 o14187_0_true = vec3(1.0)-o14187_0_false;vec4 o14187_0_1_rgba = vec4(o14187_0_false, vec4(vec3(o14181_0_1_f), 1.0).a);
vec4 o14208_0 = textureLod(texture_1, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14301_0 = textureLod(texture_2, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14428_0 = textureLod(texture_3, (fract(transform2((transform2((vec2(fract(p_o14184_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14184_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14183_cx, 0.5+p_o14183_cy), p_o14183_radius, p_o14183_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14392_translate_x*(2.0*1.0-1.0), p_o14392_translate_y*(2.0*1.0-1.0)), p_o14392_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14392_scale_x*(2.0*1.0-1.0), p_o14392_scale_y*(2.0*o14391_0_2_f-1.0)))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), 0.0);
vec4 o14188_0_1_rgba = vec4((dot((o14187_0_1_rgba).rgb, vec3(1.0))/3.0), (dot((o14208_0).rgb, vec3(1.0))/3.0), (dot((o14301_0).rgb, vec3(1.0))/3.0), (dot((o14428_0).rgb, vec3(1.0))/3.0));
vec4 o14182_0_1_rgba = o14188_0_1_rgba;
vec4 o14392_0_1_rgba = o14182_0_1_rgba;
vec4 o14184_0_1_rgba = o14392_0_1_rgba;
vec4 o14183_0_1_rgba = o14184_0_1_rgba;
vec4 o14185_0_1_rgba = o14183_0_1_rgba;
float o14189_0_1_f = o14185_0_1_rgba.r;
float o14189_1_2_f = o14185_0_1_rgba.g;
float o14189_2_3_f = o14185_0_1_rgba.b;
float o14189_3_4_f = o14185_0_1_rgba.a;
float o14186_0_1_f = shape_circle((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), p_o14186_sides, p_o14186_radius*1.0, p_o14186_edge*1.0);
float o14377_0_clamp_false = smoothstep(0.0, 1.0, o14186_0_1_f);
float o14377_0_clamp_true = clamp(o14377_0_clamp_false, 0.0, 1.0);
float o14377_0_1_f = o14377_0_clamp_false;
float o14503_0_1_f = fbm_2d_value((fract(transform2((vec2(fract(p_o14504_repeat*atan((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251)).y-0.5, (swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o14504_radius*length((swirl_tile_false((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0)))), vec2(0.5+p_o14505_cx, 0.5+p_o14505_cy), p_o14505_radius, p_o14505_angle*0.01745329251))-vec2(0.5))))), vec2(p_o14182_translate_x*(2.0*1.0-1.0), (elapsed_time*-.5)*(2.0*1.0-1.0)), p_o14182_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14182_scale_x*(2.0*1.0-1.0), p_o14182_scale_y*(2.0*1.0-1.0))))), vec2(p_o14503_scale_x, p_o14503_scale_y), int(p_o14503_folds), int(p_o14503_iterations), p_o14503_persistence, p_o14503_offset, (seed_o14503+fract(_seed_variation_)));
vec4 o14182_1_4_rgba = vec4(vec3(o14503_0_1_f), 1.0);
vec4 o14504_0_1_rgba = o14182_1_4_rgba;
vec4 o14505_0_1_rgba = o14504_0_1_rgba;
float o14506_0_clamp_false = o14377_0_1_f-(dot((o14505_0_1_rgba).rgb, vec3(1.0))/3.0);
float o14506_0_clamp_true = clamp(o14506_0_clamp_false, 0.0, 1.0);
float o14506_0_1_f = o14506_0_clamp_true;
vec4 o14185_1_3_rgba = vec4(vec3(o14506_0_1_f), 1.0);
vec4 o14185_3_4_rgba = vec4(vec3(o14377_0_1_f), 1.0);
vec4 o14394_0_1_rgba = o14394_gradient_gradient_fct((dot((o14185_3_4_rgba).rgb, vec3(1.0))/3.0));
vec4 o14531_0_1_rgba = p_o14531_color;
float o14409_0_1_f = (length((transform2((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), vec2(p_o14185_translate_x*(2.0*1.0-1.0), p_o14185_translate_y*(2.0*1.0-1.0)), p_o14185_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o14185_scale_x*(2.0*1.0-1.0), p_o14185_scale_y*(2.0*1.0-1.0))))-.5)*2.);
float o14393_0_clamp_false = p_o14393_default_in1/o14409_0_1_f;
float o14393_0_clamp_true = clamp(o14393_0_clamp_false, 0.0, 1.0);
float o14393_0_2_f = o14393_0_clamp_false;
vec4 o14185_2_5_rgba = vec4(vec3(o14393_0_2_f), 1.0);
vec4 o14376_0_b = vec4(vec3(o14189_0_1_f), 1.0);
vec4 o14376_0_l;
float o14376_0_a;

o14376_0_l = vec4(vec3(o14189_1_2_f), 1.0);
o14376_0_a = p_o14376_amount1*1.0;
o14376_0_b = vec4(blend_additive((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

o14376_0_l = vec4(vec3(o14189_2_3_f), 1.0);
o14376_0_a = p_o14376_amount2*1.0;
o14376_0_b = vec4(blend_additive((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

o14376_0_l = vec4(vec3(o14189_3_4_f), 1.0);
o14376_0_a = p_o14376_amount3*1.0;
o14376_0_b = vec4(blend_additive((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

o14376_0_l = o14185_1_3_rgba;
o14376_0_a = p_o14376_amount4*1.0;
o14376_0_b = vec4(blend_multiply((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

o14376_0_l = o14394_0_1_rgba;
o14376_0_a = p_o14376_amount5*1.0;
o14376_0_b = vec4(blend_multiply((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

o14376_0_l = o14531_0_1_rgba;
o14376_0_a = p_o14376_amount6*(dot((o14185_2_5_rgba).rgb, vec3(1.0))/3.0);
o14376_0_b = vec4(blend_additive((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14376_0_l.rgb, o14376_0_b.rgb, o14376_0_a*o14376_0_l.a), min(1.0, o14376_0_b.a+o14376_0_a*o14376_0_l.a));

vec4 o14376_0_2_rgba = o14376_0_b;
float o14510_0_1_f = p_o14510_color;
float o14532_1_1_f = o14532_input_in((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), (seed_o14532+fract(_seed_variation_))+p_o14532_v2);
float o14509_0_clamp_false = o14532_1_1_f+p_o14509_default_in2;
float o14509_0_clamp_true = clamp(o14509_0_clamp_false, 0.0, 1.0);
float o14509_0_2_f = o14509_0_clamp_true;
vec4 o14513_0_1_rgba = p_o14513_color;
vec2 o14529_0_c = vec2(0.5+p_o14529_cx, 0.5+p_o14529_cy);float o14409_0_3_f = (length((rotate((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y)))-o14529_0_c, p_o14529_rotate*0.01745329251)+o14529_0_c)-.5)*2.);
float o14393_3_clamp_false = p_o14393_default_in1/o14409_0_3_f;
float o14393_3_clamp_true = clamp(o14393_3_clamp_false, 0.0, 1.0);
float o14393_0_5_f = o14393_3_clamp_false;
vec4 o14514_0_1_rgba = o14514_gradient_gradient_fct(fract(p_o14514_repeat*0.15915494309*atan((uvmirror_h((rotate((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y)))-o14529_0_c, p_o14529_rotate*0.01745329251)+o14529_0_c), p_o14528_offset, true ? -1.0 : 1.0)).y-0.5, (uvmirror_h((rotate((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y)))-o14529_0_c, p_o14529_rotate*0.01745329251)+o14529_0_c), p_o14528_offset, true ? -1.0 : 1.0)).x-0.5)));
float o14527_0_step = clamp(((dot((o14514_0_1_rgba).rgb, vec3(1.0))/3.0) - (p_o14527_value))/max(0.0001, p_o14527_width)+0.5, 0.0, 1.0);
float o14527_0_false = clamp((min(o14527_0_step, 1.0-o14527_0_step) * 2.0) / (1.0 - p_o14527_contrast), 0.0, 1.0);
float o14527_0_true = 1.0-o14527_0_false;float o14527_0_1_f = o14527_0_true;
vec4 o14528_0_1_rgba = vec4(vec3(o14527_0_1_f), 1.0);
float o14511_0_clamp_false = o14393_0_5_f/(dot((o14528_0_1_rgba).rgb, vec3(1.0))/3.0);
float o14511_0_clamp_true = clamp(o14511_0_clamp_false, 0.0, 1.0);
float o14511_0_1_f = o14511_0_clamp_false;
float o14512_0_clamp_false = o14511_0_1_f*p_o14512_default_in2;
float o14512_0_clamp_true = clamp(o14512_0_clamp_false, 0.0, 1.0);
float o14512_0_2_f = o14512_0_clamp_false;
vec4 o14529_0_1_rgba = vec4(vec3(o14512_0_2_f), 1.0);
vec4 o14508_0_b = o14376_0_2_rgba;
vec4 o14508_0_l;
float o14508_0_a;

o14508_0_l = vec4(vec3(o14510_0_1_f), 1.0);
o14508_0_a = p_o14508_amount1*o14509_0_2_f;
o14508_0_b = vec4(blend_overlay((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14508_0_l.rgb, o14508_0_b.rgb, o14508_0_a*o14508_0_l.a), min(1.0, o14508_0_b.a+o14508_0_a*o14508_0_l.a));

o14508_0_l = o14513_0_1_rgba;
o14508_0_a = p_o14508_amount2*(dot((o14529_0_1_rgba).rgb, vec3(1.0))/3.0);
o14508_0_b = vec4(blend_additive((scale((uv), vec2(0.5+p_o14530_cx, 0.5+p_o14530_cy), vec2(p_o14530_scale_x, p_o14530_scale_y))), o14508_0_l.rgb, o14508_0_b.rgb, o14508_0_a*o14508_0_l.a), min(1.0, o14508_0_b.a+o14508_0_a*o14508_0_l.a));

vec4 o14508_0_1_rgba = o14508_0_b;
vec4 o14530_0_1_rgba = o14508_0_1_rgba;

	vec4 color_tex = o14530_0_1_rgba;
	color_tex = mix(pow((color_tex + vec4(0.055)) * (1.0 / (1.0 + 0.055)),vec4(2.4)),color_tex * (1.0 / 12.92),lessThan(color_tex,vec4(0.04045)));
	ALBEDO = color_tex.rgb;
	ALPHA = color_tex.a;

}



